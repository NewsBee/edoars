generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int      @id @default(autoincrement())
  external_user_id       Int      @unique // ID dari API eksternal
  name                   String // Nama pengguna
  email                  String   @unique // Email pengguna
  phone_number           String? // Nomor telepon pengguna
  nim                    String?  @unique // NIM untuk mahasiswa
  role                   String // Role pengguna (Mahasiswa, Dosen, Admin)
  nama_satker            String? // Nama satuan kerja
  id_satker              String? // ID satuan kerja
  periode_masuk          String? // Periode masuk mahasiswa
  google_drive_folder_id String? // Folder Google Drive
  status                 String // Status aktif (1 = aktif, 0 = tidak aktif)
  signature_image        String? // Tanda tangan digital
  profile_image          String? // Foto profil
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  Submissions         Submission[]
  Notifications       Notification[]
  Logs                ActivitySubmissionLog[]
  Discussions         Discussion[]
  Grading             Grading[]
  StudentPermissions  StudentTypeAccessPermission[]
  TypePermissions     TypeAccessPermission[]
  AssignedLecturers   AssignedLecturer[]
  SkillGroupLecturers SkillGroupLecturer[]
  TitleSubmission     TitleSubmission[]
  DiscussionRoom      DiscussionRoom[]
  SentMessages        Message[]                     @relation("UserToMessage")
}

model TitleSubmission {
  id                  Int               @id @default(autoincrement())
  userId              Int               // ID mahasiswa
  title               String            // Judul penelitian
  topic               String?           // Topik penelitian
  abstract            String            @db.Text // Abstrak penelitian
  status              String            @default("Pending") // Status pengajuan (Pending, Approved, Rejected)
  reason              String?           // Alasan penolakan (jika ditolak)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now())

  User                User              @relation(fields: [userId], references: [id])
  assignedLecturers   AssignedLecturer[] // Relasi dengan pembimbing
  activityLogs        ActivitySubmissionLog[] // Relasi dengan log aktivitas
}


model Submission {
  id          Int       @id @default(autoincrement())
  userId      Int // ID mahasiswa
  typeId      Int // ID tipe pengajuan
  relatedTitleId      Int?
  title       String // Judul pengajuan
  description String?  @db.Text// Deskripsi pengajuan
  status      String    @default("Pending") // Status pengajuan (Pending, Approved, Rejected)
  jadwal      DateTime? // Jadwal sidang atau seminar
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  User              User                     @relation(fields: [userId], references: [id])
  Type              Type                     @relation(fields: [typeId], references: [id])
  RequiredFiles     SubmissionRequiredFile[]
  Logs              ActivitySubmissionLog[]
  Discussions       Discussion[]
  Grading           Grading[]
  AssignedLecturers AssignedLecturer[]
  DiscussionRoom    DiscussionRoom[]
}

model Type {
  id          Int      @id @default(autoincrement())
  name        String   @unique // Nama tipe pengajuan (Proposal, Sidang Akhir)
  slug        String   @unique // Slug tipe pengajuan
  color       String // Warna identifikasi tipe pengajuan
  description String? // Deskripsi tipe pengajuan
  status      String   @default("active") // Status tipe
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Submissions        Submission[]
  RequiredFiles      RequiredFile[]
  Formats            Format[]
  StudentPermissions StudentTypeAccessPermission[]
  TypePermissions    TypeAccessPermission[]
}

model ApprovalLog {
  id           Int      @id @default(autoincrement())
  userId       Int      // ID pengguna yang membuat keputusan (admin/dosen)
  submissionId Int?     // ID pengajuan (opsional, jika ini terkait Submission)
  titleSubmissionId Int? // ID pengajuan judul (opsional, jika ini terkait TitleSubmission)
  action       String   // Tindakan (Approved, Rejected)
  reason       String?  // Alasan tindakan (jika ada)
  createdAt    DateTime @default(now())
}


model RequiredFile {
  id              Int      @id @default(autoincrement())
  typeId          Int // ID tipe pengajuan
  file_name       String // Nama file yang dibutuhkan
  is_required     Boolean  @default(true) // Apakah file wajib diunggah
  allowed_formats String // Format yang diperbolehkan (contoh: "PDF, DOCX")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Type                    Type                     @relation(fields: [typeId], references: [id])
  SubmissionRequiredFiles SubmissionRequiredFile[]
}

model SubmissionRequiredFile {
  id             Int      @id @default(autoincrement())
  submissionId   Int // ID pengajuan
  requiredFileId Int // ID file yang dibutuhkan
  file_url       String? // URL file yang diunggah
  status         String   @default("Pending") // Status file (Pending, Approved, Rejected)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Submission   Submission   @relation(fields: [submissionId], references: [id])
  RequiredFile RequiredFile @relation(fields: [requiredFileId], references: [id])
}

model AssignedLecturer {
  id                 Int               @id @default(autoincrement())
  titleSubmissionId  Int?              // ID pengajuan judul (opsional, jika terkait TitleSubmission)
  submissionId       Int?              // ID pengajuan (opsional, jika terkait Submission)
  lecturerId         Int               // ID dosen
  role               String            // Role (Pembimbing 1, Pembimbing 2, Penguji)
  source             String?            // Sumber penentuan (TitleSubmission, Submission)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now())

  TitleSubmission    TitleSubmission?  @relation(fields: [titleSubmissionId], references: [id])
  Submission         Submission?       @relation(fields: [submissionId], references: [id])
  User               User              @relation(fields: [lecturerId], references: [id])
}


model Format {
  id                   Int      @id @default(autoincrement())
  typeId               Int // ID tipe pengajuan
  name                 String // Nama format
  document_format      String? // Format dokumen (contoh: PDF, DOCX)
  is_primary           Boolean  @default(false) // Apakah format utama?
  is_schedule_required Boolean  @default(false) // Apakah jadwal diperlukan?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  Type Type @relation(fields: [typeId], references: [id])
}

model SkillGroup {
  id        Int      @id @default(autoincrement())
  name      String // Nama kelompok keahlian
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Lecturers SkillGroupLecturer[]
}

model SkillGroupLecturer {
  id           Int      @id @default(autoincrement())
  skillGroupId Int // ID kelompok keahlian
  userId       Int // ID pengguna (dosen)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  SkillGroup SkillGroup @relation(fields: [skillGroupId], references: [id])
  User       User       @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int // ID pengguna
  message   String // Pesan notifikasi
  is_read   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}

model DiscussionRoom {
  id            Int      @id @default(autoincrement())
  submissionId  Int // ID pengajuan
  participantId Int // ID peserta (dosen/mahasiswa)
  role          String // Role (Pembimbing, Penguji, Mahasiswa)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Submission       Submission        @relation(fields: [submissionId], references: [id])
  User             User              @relation(fields: [participantId], references: [id])
  Messages         Message[]
  DiscussionPoints DiscussionPoint[]
}

model DiscussionPoint {
  id               Int      @id @default(autoincrement())
  discussionRoomId Int // ID ruang diskusi
  description      String // Deskripsi poin bimbingan
  status           String   @default("Pending") // Status (Pending, In Progress, Completed)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  DiscussionRoom DiscussionRoom @relation(fields: [discussionRoomId], references: [id])
  Messages       Message[]
}

model Message {
  id                Int      @id @default(autoincrement())
  discussionRoomId  Int // ID ruang diskusi
  discussionPointId Int? // ID poin diskusi (opsional)
  senderId          Int // ID pengirim pesan
  content           String // Isi pesan
  fileUrl           String? // URL file yang dilampirkan
  messageType       String   @default("text") // Jenis pesan (text, file, image)
  createdAt         DateTime @default(now())

  DiscussionRoom  DiscussionRoom   @relation(fields: [discussionRoomId], references: [id])
  DiscussionPoint DiscussionPoint? @relation(fields: [discussionPointId], references: [id])
  Sender          User             @relation(fields: [senderId], references: [id], name: "UserToMessage")
}

model StudentTypeAccessPermission {
  id        Int      @id @default(autoincrement())
  userId    Int // ID mahasiswa
  typeId    Int // ID tipe pengajuan
  createdAt DateTime @default(now())

  User User @relation(fields: [userId], references: [id])
  Type Type @relation(fields: [typeId], references: [id])
}

model TypeAccessPermission {
  id        Int      @id @default(autoincrement())
  userId    Int // ID pengguna (dosen, admin)
  typeId    Int // ID tipe pengajuan
  createdAt DateTime @default(now())

  User User @relation(fields: [userId], references: [id])
  Type Type @relation(fields: [typeId], references: [id])
}

model TemporaryFile {
  id        Int      @id @default(autoincrement())
  folder    String // Folder sementara
  filename  String // Nama file
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model ActivitySubmissionLog {
//   id           Int      @id @default(autoincrement())
//   submissionId Int // ID pengajuan terkait
//   userId       Int // ID pengguna
//   activity     String // Aktivitas pengguna
//   createdAt    DateTime @default(now())

//   Submission Submission @relation(fields: [submissionId], references: [id])
//   TitleSubmission     TitleSubmission?  @relation(fields: [titleSubmissionId], references: [id])
//   User       User       @relation(fields: [userId], references: [id])
// }

model ActivitySubmissionLog {
  id                Int               @id @default(autoincrement())
  submissionId      Int?              // ID pengajuan Submission (opsional)
  titleSubmissionId Int?              // ID pengajuan TitleSubmission (opsional)
  userId            Int               // ID pengguna
  activity          String            // Aktivitas pengguna
  createdAt         DateTime          @default(now())

  Submission        Submission?       @relation(fields: [submissionId], references: [id])
  TitleSubmission   TitleSubmission?  @relation(fields: [titleSubmissionId], references: [id])
  User              User              @relation(fields: [userId], references: [id])
}


model Discussion {
  id           Int      @id @default(autoincrement())
  submissionId Int // ID pengajuan terkait
  senderId     Int // ID pengirim pesan
  message      String // Isi pesan diskusi
  createdAt    DateTime @default(now())

  Submission Submission @relation(fields: [submissionId], references: [id])
  User       User       @relation(fields: [senderId], references: [id])
}

model Grading {
  id            Int      @id @default(autoincrement())
  submissionId  Int // ID pengajuan
  verificatorId Int // ID dosen
  grade         Float // Nilai akhir
  comments      String? // Komentar dosen
  createdAt     DateTime @default(now())

  Submission Submission @relation(fields: [submissionId], references: [id])
  User       User       @relation(fields: [verificatorId], references: [id])
}
